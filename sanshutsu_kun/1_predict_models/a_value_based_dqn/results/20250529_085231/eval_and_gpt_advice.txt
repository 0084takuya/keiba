【評価対象データ】
・対象期間: 直近1080日分
・使用特徴量:
  - 馬齢（BAREI）
  - 性別コード（SEIBETSU_CODE）
  - 馬体重（BATAIJU）
  - 直近体重変化（BATAIJU_DIFF）
  - 同レース内馬体重順位（BATAIJU_RANK）
  - 同レース内人気順位（NINKI_RANK）
  - 負担重量（FUTAN_JURYO）
  - 単勝人気順（TANSHO_NINKIJUN）
  - 枠順（WAKUBAN）
  - 距離（KYORI）
  - 芝/ダート（トラックコード）（TRACK_CODE）
  - 頭数（SHUSSO_TOSU）
  - 騎手3着以内率（KISHU_3IN_RATE）
  - 馬場状態（TENKO_CODE）
  - 調教師3着以内率（CHOKYOSHI_3IN_RATE）
  - 父系統ID（FATHER_LINEAGE）
  - 馬過去5走3着以内率（UMA_5R_3IN_RATE）
  - コース適性3着以内率（COURSE_3IN_RATE）
  - コース×馬過去5走3着以内率（COURSE_UMA_5R_3IN_RATE）
  - 父系統ターゲットエンコーディング（FATHER_LINEAGE_TE）
  - トラックコードターゲットエンコーディング（TRACK_CODE_TE）
  - 馬体重×距離（BATAIJU_KYORI）
  - 馬齢×負担重量（BAREI_FUTAN_JURYO）
  - 騎手×調教師ターゲットエンコーディング（KISHU_CHOKYOSHI_TE）
  - 馬×コースターゲットエンコーディング（UMA_COURSE_TE）
  - レース間隔（日数）（RACE_KANKAKU）
  - 馬場状態（良=1, それ以外=0）（TENKO_FINE）

--- 評価結果 ---
Accuracy: 0.9775
F1 Score: 0.9483
              precision    recall  f1-score   support

           0       1.00      0.97      0.99      8832
           1       0.90      1.00      0.95      2302

    accuracy                           0.98     11134
   macro avg       0.95      0.99      0.97     11134
weighted avg       0.98      0.98      0.98     11134

--- PRカーブからF1最大化となる最適閾値: 0.626 ---
--- 最適閾値での再評価 ---
Accuracy: 0.9982
F1 Score: 0.9957
              precision    recall  f1-score   support

           0       1.00      1.00      1.00      8832
           1       0.99      1.00      1.00      2302

    accuracy                           1.00     11134
   macro avg       1.00      1.00      1.00     11134
weighted avg       1.00      1.00      1.00     11134


--- GPT-4.1からの改善アドバイス ---
モデル評価結果と4つのグラフ（ROC曲線、PR曲線、学習曲線、混同行列）を踏まえて、モデル改善のためのアドバイスを簡潔にまとめます。

---

### 1. 過学習の懸念
- **学習曲線**から、トレーニングとバリデーションのスコアがほぼ重なり、高い値で収束していますが、精度・F1スコアがほぼ1.0に近い値となっており、**過学習の可能性**があります。本番未観測データや将来データでの性能が落ちるリスクがあります。

#### 【改善策】
- **ドロップアウトやL2正則化**の強化
- **入力特徴量の削減（特徴量選択）**：重要度の低い特徴量を減らす
- **データ拡張やシャッフル、交差検証**による汎化性能のチェック

---

### 2. データリーク・情報漏洩の疑い
- **最適閾値での評価で精度・F1がほぼ1.0**になっているのは、学習時点で本来未知であるべき情報が特徴量として含まれている疑いがあります。例えば、ターゲットエンコーディングなどが「未来情報」になっていないか要確認です。

#### 【改善策】
- **ターゲットエンコーディングの計算方法の見直し**（リークしていないかクロスバリデーション等でエンコードする）
- **レース結果に依存する特徴量**（例：人気順など）の扱いに注意

---

### 3. クラス不均衡・評価指標の偏り
- 混同行列・PRカーブから、少数クラス（3着以内）が十分に検出できているようですが、**サンプル分布や閾値設定**によってはリコールや適合率が大きく変化します。今後データ分布が変わった際は要注意です。

#### 【改善策】
- **クラスバランスの調整（アンダー／オーバーサンプリング）**
- **閾値最適化の運用フロー化**（PRカーブで定期的に最適閾値を再評価）

---

### 4. 特徴量・モデル構造の見直し
- 類似特徴量（順位とエンコーディング、交互作用特徴など）が多く、**冗長性や多重共線性**がある可能性があります。

#### 【改善策】
- **特徴量の重要度分析（Permutation Importance, SHAP値など）**による整理
- **特徴量削減／新規特徴量設計**（例：時系列情報や外部情報の導入）

---

### 5. 本番運用リスク・再現性
- 本番で予測するタイミング（発走前）で利用可能な情報のみを特徴量とすることを徹底してください。
- **データの取り扱い（バリデーション方法やクロスバリデーション分割）**も再度確認してください。

---

## まとめ（推奨アクション）

1. **ターゲットエンコーディング等の情報リークがないか厳しく再確認**
2. **特徴量重要度を算出し、冗長な特徴量を削減**
3. **正則化やドロップアウトを強化して過学習を抑制**
4. **本番用データでの「未来情報」遮断・再現性の担保**
5. **新規データでの検証や時系列分割による汎化性能の評価**

これらを実施し、実運用や将来データでの安定した性能発揮につなげてください。
